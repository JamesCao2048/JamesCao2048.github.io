---
---
@inproceedings{cao2022, 
author={Junming Cao and Bihuan Chen and Chao Sun and Longjie Hu and Shuaihong Wu and Xin Peng}, 
booktitle={Proceedings of the 30th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, Singapore, November 14-18, 2022}, 
title={Understanding Performance Problems in Deep Learning Systems}, 
year={2022}, 
publisher = {{ACM}},
abstract = {Deep learning (DL) has been widely applied to many domains. Unique challenges in engineering DL systems are posed by the programming paradigm shift from traditional systems to DL systems, and performance is one of the challenges. Performance problems (PPs) in DL systems can cause severe consequences such as excessive resource consumption and financial loss. While bugs in DL systems have been extensively investigated, PPs in DL systems have hardly been explored. To bridge this gap, we present the first comprehensive study to i) characterize symptoms, root causes, and introducing and exposing stages of PPs in DL systems developed in TensorFLow and Keras, with 224 PPs collected from 210 StackOverflow posts, and to ii) assess the capability of existing performance analysis approaches in tackling PPs,
with a constructed benchmark of 58 PPs in DL systems. Our findings shed light on the implications on developing high-performance DL systems, and detecting and localizing PPs in DL systems. To demonstrate the usefulness of our findings, we develop a static checker DeepPerf to detect three types of PPs. It has detected 488 new PPs in 130 GitHub projects. 105 and 27 PPs have been confirmed and fixed},
abbr = {ESEC/FSE},
selected = {true},
pdf = {dlperf.pdf},
code = {https://dlperf.github.io/},
demo = {https://www.youtube.com/watch?v=7gefvzLxzY4},
}

@inproceedings{huang2022, 
author={Kaifeng Huang and Bihuan Chen and Susheng Wu and Junmin Cao and Lei Ma and Xin Peng}, 
booktitle={arXiv preprint}, 
title={Demystifying Dependency Bugs in Deep Learning Stack}, 
year={2022},
publisher = {{arXiv preprint}},
abstract = {IR-based fault localization approaches achieves promising results when locating faulty files by comparing a bug report with source code. Unfortunately, they become less effective to locate faulty methods. We conduct a preliminary study to explore its challenges, and identify three problems: the semantic gap problem, the representation sparseness problem, and the single revision problem. To tackle these problems, we propose MRAM, a mixed RNN and attention model, which combines bug-fixing features and method structured features to explore both implicit and explicit relevance between methods and bug reports for method level fault localization task. The core ideas of our model are: (1) constructing code revision graphs from code, commits and past bug reports, which reveal the latent relations among methods to augment short methods and as well provide all revisions of code and past fixes to train more accurate models; (2) embedding three method structured features (token sequences, API invocation sequences, and comments) jointly with RNN and soft attention to represent source methods and obtain their implicit relevance with bug reports; and (3) integrating multirevision bug-fixing features, which provide the explicit relevance between bug reports and methods, to improve the performance. We have implemented MRAM and conducted a controlled experiment on five open-source projects. Comparing with stateof-the-art approaches, our MRAM improves MRR values by 3.8- 5.1% (3.7-5.4%) when the dataset contains (does not contain) localized bug reports. Our statistics test shows that our improvements are significant},
selected = {true},
abbr = {arXiv},
pdf = {dlstack.pdf},
code = {https://dl-dep.github.io/},
}

@inproceedings{yang2021lo, 
author={Shouliang Yang and Junming Cao and Hushuang Zeng and Beijun Shen and Hao Zhong}, 
booktitle={29th International Conference on Program Comprehension, Virtual, May 18-21, 2021}, 
title={Locating Faulty Methods with a Mixed RNN and Attention Model}, 
year={2021}, 
pages={10--21},
publisher = {{IEEE/ACM}},
abstract = {IR-based fault localization approaches achieves promising results when locating faulty files by comparing a bug report with source code. Unfortunately, they become less effective to locate faulty methods. We conduct a preliminary study to explore its challenges, and identify three problems: the semantic gap problem, the representation sparseness problem, and the single revision problem. To tackle these problems, we propose MRAM, a mixed RNN and attention model, which combines bug-fixing features and method structured features to explore both implicit and explicit relevance between methods and bug reports for method level fault localization task. The core ideas of our model are: (1) constructing code revision graphs from code, commits and past bug reports, which reveal the latent relations among methods to augment short methods and as well provide all revisions of code and past fixes to train more accurate models; (2) embedding three method structured features (token sequences, API invocation sequences, and comments) jointly with RNN and soft attention to represent source methods and obtain their implicit relevance with bug reports; and (3) integrating multirevision bug-fixing features, which provide the explicit relevance between bug reports and methods, to improve the performance. We have implemented MRAM and conducted a controlled experiment on five open-source projects. Comparing with stateof-the-art approaches, our MRAM improves MRR values by 3.8- 5.1% (3.7-5.4%) when the dataset contains (does not contain) localized bug reports. Our statistics test shows that our improvements are significant},
abbr = {ICPC},
selected = {true},
pdf = {DNNLocator.pdf},
code = {https://github.com/OrthrusFL/MRAM},
}

@inproceedings{ASE20,
  author    = {Junming Cao and
               Shouliang Yang and
               Wenhui Jiang and
              Hushuang Zeng and
               Beijun Shen and
               Hao Zhong},
  title     = {BugPecker: Locating Faulty Methods with Deep Learning on Revision Graphs},
  booktitle = {35th {IEEE/ACM} International Conference on Automated Software Engineering,
               {ASE} 2020, New Idea Track, Virtual Event, Australia},
  abbr = {ASE},
  abstract = {Given a bug report of a project, the task of locating the faults of the bug report is called fault localization. To help programmers in the fault localization process, many approaches have been proposed, and have achieved promising results to locate faulty files. How- ever, it is still challenging to locate faulty methods, because many methods are short and do not have sufficient details to determine whether they are faulty. In this paper, we present BugPecker, a novel approach to locate faulty methods based on its deep learn- ing on revision graphs. Its key idea includes (1) building revision graphs and capturing the details of past fixes as much as possible, and (2) discovering relations inside our revision graphs to expand the details for methods and calculating various features to assist our ranking. We have implemented BugPecker, and evaluated it on three open source projects. The early results show that BugPecker achieves a mean average precision (MAP) of 0.263 and mean re- ciprocal rank (MRR) of 0.291, which improve the prior approaches significantly. For example, BugPecker improves the MAP values of all three projects by five times, compared with two recent ap- proaches such as DNNLoc-m and BLIA 1.5.},
  selected = {true},
  pages     = {1083--1087},
  publisher = {{IEEE}},
  doi =  {10.1145/3324884.3418934},
  year      = {2020},
  pdf = {BugPecker.pdf},
  code = {https://github.com/RAddRiceee/BugPecker},
}

@inproceedings{DBLP:conf/kbse/DuCWLSC19,
  author    = {Tianjiao Du and
               Junming Cao and
               Qinyue Wu and
               Wei Li and
               Beijun Shen and
               Yuting Chen},
  title     = {CocoQa: Question Answering for Coding Conventions Over Knowledge Graphs},
  booktitle = {34th {IEEE/ACM} International Conference on Automated Software Engineering,
               {ASE} 2019, Tool Demo Track, San Diego, CA, USA},
  abbr = {ASE},
  abstract = {Coding convention plays an important role in guaranteeing software quality. However, coding conventions are usually informally presented and inconvenient for programmers to use. In this paper, we present CocoQa, a system that answers programmer's questions about coding conventions. CocoQa answers questions by querying a knowledge graph for coding conventions. It employs 1) a subgraph matching algorithm that parses the question into a SPARQL query, and 2) a machine comprehension algorithm that uses an end-to-end neural network to detect answers from searched paragraphs. We have implemented CocoQa, and evaluated it on a coding convention QA dataset. The results show that CocoQa can answer questions about coding conventions precisely. In particular, CocoQa can achieve a precision of 82.92% and a recall of 91.10%. Repository: https://github.com/14dtj/CocoQa/ Video: https://youtu.be/VQaXi1WydAU.},
  selected = {true},
  pages     = {1086--1089},
  publisher = {{IEEE}},
  year      = {2019},
  url       = {https://doi.org/10.1109/ASE.2019.00108},
  pdf = {CocoQa.pdf},
  code = {https://github.com/14dtj/CocoQa},
  demo = {https://youtu.be/VQaXi1WydAU},
  doi       = {10.1109/ASE.2019.00108},
  timestamp = {Sun, 19 Jan 2020 15:19:48 +0100},
  biburl    = {https://dblp.org/rec/conf/kbse/DuCWLSC19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/seke/CaoDSLWC19,
  author    = {Junming Cao and
               Tianjiao Du and
               Beijun Shen and
               Wei Li and
               Qinyue Wu and
               Yuting Chen},
  editor    = {Angelo Perkusich},
  title     = {Constructing a Knowledge Base of Coding Conventions from Online Resources},
  booktitle = {The 31st International Conference on Software Engineering and Knowledge
               Engineering, {SEKE} 2019, Lisbon, Portugal},
  abbr = {SEKE},
  pages     = {5--14},
  publisher = {{KSI} Research Inc. and Knowledge Systems Institute Graduate School},
  year      = {2019},
  url       = {https://doi.org/10.18293/SEKE2019-123},
  doi       = {10.18293/SEKE2019-123},
  timestamp = {Wed, 14 Aug 2019 09:30:44 +0200},
  biburl    = {https://dblp.org/rec/conf/seke/CaoDSLWC19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/seke/NiSCMC19,
  author    = {Zeyu Ni and
               Beijun Shen and
               Yuting Chen and
               Zhangyuan Meng and
               Junming Cao},
  editor    = {Angelo Perkusich},
  title     = {CrowDevBot: {A} Task-Oriented Conversational Bot for Software Crowdsourcing
               Platforms},
  booktitle = {The 31st International Conference on Software Engineering and Knowledge
               Engineering, {SEKE} 2019, Lisbon, Portugal},
  abbr = {SEKE},
  pages     = {410--522},
  publisher = {{KSI} Research Inc. and Knowledge Systems Institute Graduate School},
  year      = {2019},
  url       = {https://doi.org/10.18293/SEKE2019-068},
  doi       = {10.18293/SEKE2019-068},
  timestamp = {Wed, 14 Aug 2019 09:30:44 +0200},
  biburl    = {https://dblp.org/rec/conf/seke/NiSCMC19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

